/*
 * App URI: planner-board-list
 * Source Location: planner-board-list.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("planner-board-list", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * planner-board-list.js
			 * Created at 2023. 8. 14. 오전 9:46:20.
			 *
			 * @author USER
			 ************************************************/

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e) {
				app.lookup("plannerBoardListSM").send();
			}

			/*
			 * 그리드에서 row-dblclick 이벤트 발생 시 호출.
			 * detail이 row를 더블클릭 한 경우 발생하는 이벤트.
			 */
			function onPlannerBoardListGridRowDblclick(e) {
				var plannerBoardListGrid = e.control;
				var plannerNo = plannerBoardListGrid.getSelectedRow().getValue("plannerNo");
				location.href = "boardDetailPage/" + plannerNo;
			}

			/*
			 * 서브미션에서 submit-error 이벤트 발생 시 호출.
			 * 통신 중 문제가 생기면 발생합니다.
			 */
			function onPlannerBoardListSMSubmitError(e) {
				var plannerBoardListSM = e.control;
				var message = plannerBoardListSM.getMetadata("message");
				alert(message);
				location.href = "login.clx";
			}

			function gridPaging() {
				var plannerBoardListGrid = app.lookup("plannerBoardListGrid");
				var pageIdx = app.lookup("pageIdx");
				const rowCount = plannerBoardListGrid.getRowCount();
				pageIdx.redraw();
				var currentPageIndex = pageIdx.currentPageIndex;
				var startRowIndex = (currentPageIndex - 1) * pageIdx.pageRowCount;
				var endRowIndex = currentPageIndex * pageIdx.pageRowCount;
				/* filter 조건을 통해 그리드를 페이징합니다. */
				plannerBoardListGrid.setFilter(startRowIndex + " < boardNo && boardNo <= " + endRowIndex);
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onPlannerBoardListSMSubmitSuccess(e) {
				var plannerBoardListSM = e.control;
				gridPaging();
			}

			/*
			 * 페이지 인덱서에서 selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경된 후에 발생하는 이벤트.
			 */
			function onPageIndexerSelectionChange(e) {
				var pageIndexer = e.control;
				gridPaging();
			}

			/*
			 * "글 작성" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e) {
				var button = e.control;
				location.href = "createPlannerBoardForm";
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("plannerBoardList");
			dataSet_1.parseData({
				"columns" : [
					{
						"name": "boardNo",
						"dataType": "string"
					},
					{
						"name": "plannerNo",
						"dataType": "string"
					},
					{
						"name": "id",
						"dataType": "string"
					},
					{
						"name": "boardTitle",
						"dataType": "string"
					},
					{
						"name": "boardContent",
						"dataType": "string"
					},
					{
						"name": "boardCreateDate",
						"dataType": "string"
					},
					{
						"name": "boardHits",
						"dataType": "string"
					}
				]
			});
			(function(dataSet){
				var dataView_1 = new cpr.data.DataView("dvPaging", dataSet);
				dataView_1.parseData({});
				app.register(dataView_1);
			})(dataSet_1);
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("plannerBoardList2");
			dataSet_2.parseData({
				"columns" : [
					{
						"name": "boardNo",
						"dataType": "string"
					},
					{
						"name": "plannerNo",
						"dataType": "string"
					},
					{
						"name": "id",
						"dataType": "string"
					},
					{
						"name": "boardTitle",
						"dataType": "string"
					},
					{
						"name": "boardContent",
						"dataType": "string"
					},
					{
						"name": "boardCreateDate",
						"dataType": "string"
					},
					{
						"name": "boardHits",
						"dataType": "string"
					}
				]
			});
			(function(dataSet){
				var dataView_2 = new cpr.data.DataView("dvPaging2", dataSet);
				dataView_2.parseData({});
				app.register(dataView_2);
			})(dataSet_2);
			app.register(dataSet_2);
			var submission_1 = new cpr.protocols.Submission("plannerBoardListSM");
			submission_1.method = "get";
			submission_1.action = "getPlannerBoardList";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			if(typeof onPlannerBoardListSMSubmitError == "function") {
				submission_1.addEventListener("submit-error", onPlannerBoardListSMSubmitError);
			}
			if(typeof onPlannerBoardListSMSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onPlannerBoardListSMSubmitSuccess);
			}
			app.register(submission_1);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			var dataRowContext_1 = new cpr.bind.DataRowContext(app.lookup("plannerBoardList"), 0);
			container.setBindContext(dataRowContext_1);
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.logo();
			container.addChild(userDefinedControl_1, {
				"top": "10px",
				"left": "10px",
				"width": "196px",
				"height": "77px"
			});
			
			var userDefinedControl_2 = new udc.header_nav();
			container.addChild(userDefinedControl_2, {
				"top": "10px",
				"right": "20px",
				"width": "623px",
				"height": "77px"
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.value = "플래너 게시판";
			output_1.style.css({
				"font-size" : "50px",
				"font-family" : "@휴먼엑스포",
				"text-align" : "center"
			});
			container.addChild(output_1, {
				"top": "150px",
				"width": "578px",
				"height": "81px",
				"left": "calc(50% - 289px)"
			});
			
			var group_1 = new cpr.controls.Container();
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "100px"]);
			formLayout_1.setRows(["50px", "0px"]);
			formLayout_1.setRowAutoSizing(1, true);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button();
				button_1.value = "글쓰기";
				button_1.style.css({
					"background-color" : "#306dc6",
					"background-repeat" : "no-repeat",
					"color" : "#FFFFFF",
					"font-size" : "18px",
					"background-image" : "none"
				});
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0,
					"bottomSpacing": 10
				});
				var grid_1 = new cpr.controls.Grid("plannerBoardListGrid");
				grid_1.init({
					"dataSet": app.lookup("plannerBoardList"),
					"columns": [
						{"width": "50px"},
						{"width": "285px"},
						{"width": "114px"},
						{"width": "114px"},
						{"width": "62px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "boardNo";
									cell.text = "게시물 번호";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "boardTitle";
									cell.text = "제목";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "id";
									cell.text = "작성자";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "boardCreateDate";
									cell.text = "작성일";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "boardHits";
									cell.text = "조회수";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "boardNo";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "boardTitle";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "id";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "boardCreateDate";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "boardHits";
								}
							}
						]
					}
				});
				if(typeof onPlannerBoardListGridRowDblclick == "function") {
					grid_1.addEventListener("row-dblclick", onPlannerBoardListGridRowDblclick);
				}
				container.addChild(grid_1, {
					"colIndex": 0,
					"rowIndex": 1,
					"colSpan": 2,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "282px",
				"width": "950px",
				"height": "368px",
				"left": "calc(50% - 475px)"
			});
			
			var pageIndexer_1 = new cpr.controls.PageIndexer("pageIdx");
			pageIndexer_1.pageRowCount = 10;
			pageIndexer_1.bind("totalRowCount").toExpression("#plannerBoardList2.getRowCount()");
			pageIndexer_1.init(1, 1, 1);
			if(typeof onPageIndexerSelectionChange == "function") {
				pageIndexer_1.addEventListener("selection-change", onPageIndexerSelectionChange);
			}
			container.addChild(pageIndexer_1, {
				"top": "649px",
				"width": "356px",
				"height": "40px",
				"left": "calc(50% - 178px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "planner-board-list";
	cpr.core.Platform.INSTANCE.register(app);
})();
