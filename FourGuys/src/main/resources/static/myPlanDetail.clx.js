/*
 * App URI: myPlanDetail
 * Source Location: myPlanDetail.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("myPlanDetail", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * plannerBoardDetail.js
			 * Created at 2023. 8. 14. 오전 9:40:31.
			 *
			 * @author iedl9
			 ************************************************/

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e) {
				
				var currentUrl = location.href;
				var plannerNo = currentUrl.substring(currentUrl.lastIndexOf("/") + 1);
				
				app.lookup("plannerNoDM").setValue("plannerNo", plannerNo);
				app.lookup("planDetail").send();
				app.lookup("searchbtn").click();
				app.lookup("getContentIdList").send();
				
			}

			/*
			 * 그리드에서 click 이벤트 발생 시 호출. 
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGrd4Click(e) {
				var grd4 = e.control;
				var grid = app.lookup("selectedContentGrd");
				var embp = app.lookup("ep1");
				var mapx = grid.getSelectedRow().getValue("mapx");
				var mapy = grid.getSelectedRow().getValue("mapy");
				var title = grid.getSelectedRow().getValue("title");
				var firstimage = grid.getSelectedRow().getValue("firstimage");
				var embp_mapx = embp.setPageProperty("mapx", mapx);
				var embp_mapy = embp.setPageProperty("mapy", mapy);
				var embp_title = embp.setPageProperty("title", title);
				var embp_firstimage = embp.setPageProperty("firstimage", firstimage);
				embp.callPageMethod("panTo");
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onGetDaySubmitSuccess(e) {
				var getDay = e.control;
				var grid = app.lookup("selectedContentGrd");
				grid.selectRows([0]);
				//app.lookup("planDateOutput").value=1;
				app.lookup("planDM").setValue("planDate", 1);
				
			}

			/*
			 * 그리드에서 cell-click 이벤트 발생 시 호출.
			 * Grid의 Cell 클릭시 발생하는 이벤트.
			 */
			function onGrd3CellClick(e) {
				var grd3 = e.control;
				var grid = app.lookup("dayGrd");
				//var plannerNo = app.lookup("plannerNo").value;
				var planDate = grid.getSelectedRow().getValue("planDate");
				//app.lookup("planDateOutput").value=planDate;
				app.lookup("planDM").setValue("planDate", planDate);
				app.lookup("getTitle").send();
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onPlanDetailSubmitSuccess(e) {
				var planDetail = e.control;
				app.lookup("getDay").send();
				
			}

			/*
			 * "검색" 버튼(searchbtn)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onSearchbtnClick(e) {
				var searchbtn = e.control;
				app.lookup("areaList").send();
				
			}

			/*
			 * 그리드에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGrd2Click(e) {
				var grd2 = e.control;
				
				var grid = app.lookup("contentGrd");
				var embp = app.lookup("ep1");
				var mapx = grid.getSelectedRow().getValue("mapx");
				var mapy = grid.getSelectedRow().getValue("mapy");
				var title = grid.getSelectedRow().getValue("title");
				var firstimage = grid.getSelectedRow().getValue("firstimage");
				var embp_mapx = embp.setPageProperty("mapx", mapx);
				var embp_mapy = embp.setPageProperty("mapy", mapy);
				var embp_title = embp.setPageProperty("title", title);
				var embp_firstimage = embp.setPageProperty("firstimage", firstimage);
				embp.callPageMethod("panTo");
			}

			/*
			 * 그리드에서 row-check 이벤트 발생 시 호출.
			 * Grid의 행 선택 컬럼(columnType=checkbox)이 체크 되었을 때 발생하는 이벤트.
			 */
			function onGrd2RowCheck(e) {
				var grd2 = e.control;
				var grid = app.lookup("contentGrd");
				var contentId = grid.getSelectedRow().getValue("contentid");
				app.lookup("planDM").setValue("contentid", contentId);
				app.lookup("createPlan").send();
				
			}

			/*
			 * 그리드에서 row-uncheck 이벤트 발생 시 호출.
			 * Grid의 행 선택 컬럼(columnType=checkbox)이 체크 해제되었을 때 발생하는 이벤트.
			 */
			function onGrd2RowUncheck(e) {
				var grd2 = e.control;
				var contentId = grd2.getSelectedRow().getValue("contentid");
				app.lookup("planDM").setValue("contentid", contentId);
				app.lookup("deletePlan").send();
				
			}

			/*
			 * 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e) {
				var button = e.control;
				app.lookup("savePlanner").send();
				alert("수정되었습니다");
				location.href = "/myplan";
			}

			/*
			 * 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e) {
				var button = e.control;
				app.lookup("cancelPlanner").send();
				alert("취소되었습니다");
				location.href = "/myplan";
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onAreaListSubmitSuccess(e) {
				var areaList = e.control;
				var grid = app.lookup("contentGrd")
				var plannerDetail = app.lookup("plannerDetail");
				var list = [];
				for (let i = 0; i < plannerDetail.getRowCount(); i++) {
					var contentId = plannerDetail.getRow(i).getValue("contentId");
					list.push(contentId);
					
				}
				for (var j = 0; j < grid.getRowCount(); j++) {
					var contentIdd = grid.getRow(j).getValue("contentid");
					//console.log(contentIdd);
					if (list.indexOf(contentIdd) != -1) {
						grid.setCheckRowIndex(j, true);
					}
				}
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onGetContentIdListSubmitSuccess(e) {
				var getContentIdList = e.control;
				var grd2 = app.lookup("contentGrd");
				for (var i = 0; i < grd2.getRowCount(); i++) {
					var contentIdd = grd2.getRow(i).getValue("contentid");
					
				}
				
			}

			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCategoryCmbSelectionChange(e){
				var categoryCmb = e.control;
				app.lookup("areaList").send();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("planDate");
			dataSet_1.parseData({
				"columns" : [
					{"name": "planDate"},
					{"name": "planNo"},
					{"name": "plannerNo"},
					{"name": "contentId"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("selectedPlan");
			dataSet_2.parseData({
				"columns" : [
					{
						"name": "planDate",
						"dataType": "number"
					},
					{
						"name": "plannerNo",
						"dataType": "number"
					},
					{
						"name": "planNo",
						"dataType": "number"
					},
					{
						"name": "contentId",
						"dataType": "number"
					},
					{"name": "title"},
					{
						"name": "mapx",
						"dataType": "string"
					},
					{
						"name": "mapy",
						"dataType": "string"
					}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("plannerDetail");
			dataSet_3.parseData({
				"columns" : [
					{"name": "planNo"},
					{
						"name": "plannerNo",
						"dataType": "string"
					},
					{
						"name": "id",
						"dataType": "string"
					},
					{
						"name": "plannerTitle",
						"dataType": "string"
					},
					{
						"name": "plannerStartDate",
						"dataType": "string"
					},
					{
						"name": "plannerLastDay",
						"dataType": "string"
					},
					{"name": "contentId"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("jeju");
			dataSet_4.parseData({
				"columns" : [
					{
						"name": "contentid",
						"dataType": "string"
					},
					{
						"name": "mapx",
						"dataType": "string"
					},
					{
						"name": "mapy",
						"dataType": "string"
					},
					{
						"name": "title",
						"dataType": "string"
					},
					{
						"name": "tel",
						"dataType": "string"
					},
					{
						"name": "firstimage",
						"dataType": "string"
					},
					{
						"name": "addr2",
						"dataType": "string"
					},
					{
						"name": "addr1",
						"dataType": "string"
					},
					{
						"name": "cat1",
						"dataType": "string"
					},
					{
						"name": "cat2",
						"dataType": "string"
					},
					{
						"name": "cat3",
						"dataType": "string"
					}
				]
			});
			app.register(dataSet_4);
			var dataMap_1 = new cpr.data.DataMap("plannerBoardNoDM");
			dataMap_1.parseData({
				"columns" : [{
					"name": "BOARD_NO",
					"dataType": "number"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dm1");
			dataMap_2.parseData({
				"columns" : [
					{"name": "id"},
					{
						"name": "plannerNo",
						"dataType": "number"
					},
					{"name": "boardContent"},
					{
						"name": "boardNo",
						"dataType": "number"
					},
					{"name": "boardTitle"},
					{"name": "boardCreateDate"},
					{
						"name": "boardHits",
						"dataType": "number"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("plannerNoDM");
			dataMap_3.parseData({
				"columns" : [{"name": "plannerNo"}]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("planDM");
			dataMap_4.parseData({
				"columns" : [
					{"name": "contentid"},
					{"name": "planDate"}
				]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("selectTitleDM");
			dataMap_5.parseData({
				"columns" : [
					{
						"name": "plannerNo",
						"dataType": "number"
					},
					{
						"name": "planDate",
						"dataType": "number"
					},
					{"name": "title"}
				]
			});
			app.register(dataMap_5);
			
			var dataMap_6 = new cpr.data.DataMap("areaSearch");
			dataMap_6.parseData({
				"columns" : [
					{"name": "title"},
					{"name": "contentId"},
					{"name": "cat1"}
				]
			});
			app.register(dataMap_6);
			var submission_1 = new cpr.protocols.Submission("planDetail");
			submission_1.async = false;
			submission_1.method = "get";
			submission_1.action = "planDetail";
			submission_1.addRequestData(dataMap_3);
			submission_1.addResponseData(dataSet_3, false);
			if(typeof onPlanDetailSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onPlanDetailSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("selectDate");
			submission_2.method = "get";
			submission_2.action = "selectPlansByDate";
			submission_2.addRequestData(dataMap_3);
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("getDay");
			submission_3.method = "get";
			submission_3.action = "getDay";
			submission_3.addRequestData(dataMap_3);
			submission_3.addRequestData(dataMap_4);
			submission_3.addResponseData(dataSet_1, false);
			if(typeof onGetDaySubmitSuccess == "function") {
				submission_3.addEventListener("submit-success", onGetDaySubmitSuccess);
			}
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("getTitle");
			submission_4.method = "get";
			submission_4.action = "selectPlansByDate";
			submission_4.addRequestData(dataMap_3);
			submission_4.addRequestData(dataMap_4);
			submission_4.addResponseData(dataSet_2, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("areaList");
			submission_5.method = "get";
			submission_5.action = "/findAllArea";
			submission_5.addRequestData(dataMap_6);
			submission_5.addResponseData(dataSet_4, false);
			if(typeof onAreaListSubmitSuccess == "function") {
				submission_5.addEventListener("submit-success", onAreaListSubmitSuccess);
			}
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("dayBtnSM");
			submission_6.method = "get";
			submission_6.action = "getDay";
			submission_6.addRequestData(dataMap_3);
			submission_6.addResponseData(dataSet_1, false);
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("savePlanner");
			submission_7.action = "savePlanner";
			submission_7.addRequestData(dataMap_3);
			app.register(submission_7);
			
			var submission_8 = new cpr.protocols.Submission("createPlan");
			submission_8.action = "createPlan";
			submission_8.addRequestData(dataMap_3);
			submission_8.addRequestData(dataMap_4);
			submission_8.addResponseData(dataSet_2, false);
			app.register(submission_8);
			
			var submission_9 = new cpr.protocols.Submission("deletePlan");
			submission_9.method = "delete";
			submission_9.action = "deletePlan";
			submission_9.addRequestData(dataMap_3);
			submission_9.addRequestData(dataMap_4);
			submission_9.addResponseData(dataSet_2, false);
			app.register(submission_9);
			
			var submission_10 = new cpr.protocols.Submission("cancelPlanner");
			submission_10.action = "cancelPlanner";
			submission_10.addRequestData(dataMap_3);
			app.register(submission_10);
			
			var submission_11 = new cpr.protocols.Submission("getContentIdList");
			submission_11.async = false;
			submission_11.method = "get";
			submission_11.action = "getContentIdList";
			submission_11.addRequestData(dataMap_3);
			submission_11.addResponseData(dataSet_3, false);
			if(typeof onGetContentIdListSubmitSuccess == "function") {
				submission_11.addEventListener("submit-success", onGetContentIdListSubmitSuccess);
			}
			app.register(submission_11);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.logo();
			userDefinedControl_1.style.css({
				"border-right-style" : "solid",
				"border-bottom-color" : "#ffffff",
				"border-left-style" : "solid",
				"border-left-color" : "#ffffff",
				"border-top-color" : "#ffffff",
				"border-bottom-style" : "solid",
				"border-right-color" : "#ffffff",
				"border-top-style" : "solid"
			});
			container.addChild(userDefinedControl_1, {
				"top": "8px",
				"width": "175px",
				"height": "70px",
				"left": "calc(50% - 87px)"
			});
			
			var embeddedPage_1 = new cpr.controls.EmbeddedPage("ep1");
			embeddedPage_1.src = "thirdparty/maps/kakaoMapAPI.html";
			embeddedPage_1.style.css({
				"border-right-style" : "none",
				"border-bottom-color" : "#ffffff",
				"border-left-style" : "none",
				"border-left-color" : "#ffffff",
				"border-top-color" : "#ffffff",
				"border-bottom-style" : "none",
				"border-right-color" : "#ffffff",
				"border-top-style" : "none"
			});
			container.addChild(embeddedPage_1, {
				"top": "89px",
				"right": "10px",
				"bottom": "10px",
				"left": "659px"
			});
			
			var grid_1 = new cpr.controls.Grid("dayGrd");
			grid_1.init({
				"dataSet": app.lookup("planDate"),
				"columns": [{"width": "100px"}],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [{
						"constraint": {"rowIndex": 0, "colIndex": 0},
						"configurator": function(cell){
							cell.filterable = false;
							cell.sortable = false;
							cell.targetColumnName = "planDate";
							cell.text = "DAY";
							cell.style.css({
								"background-color" : "#FFFFFF",
								"color" : "#2DCEB9",
								"font-weight" : "bolder"
							});
						}
					}]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [{
						"constraint": {"rowIndex": 0, "colIndex": 0},
						"configurator": function(cell){
							cell.columnName = "planDate";
							cell.style.css({
								"font-weight" : "normal"
							});
						}
					}]
				}
			});
			grid_1.style.css({
				"font-family" : "AppleSDGothicNeoB00"
			});
			if(typeof onGrd3CellClick == "function") {
				grid_1.addEventListener("cell-click", onGrd3CellClick);
			}
			container.addChild(grid_1, {
				"top": "117px",
				"bottom": "10px",
				"left": "10px",
				"width": "170px"
			});
			
			var grid_2 = new cpr.controls.Grid("selectedContentGrd");
			grid_2.init({
				"dataSet": app.lookup("selectedPlan"),
				"columns": [{"width": "100px"}],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [{
						"constraint": {"rowIndex": 0, "colIndex": 0},
						"configurator": function(cell){
							cell.filterable = false;
							cell.sortable = false;
							cell.targetColumnName = "title";
							cell.text = "선택한 여행지";
							cell.style.css({
								"background-color" : "#FFFFFF",
								"color" : "#2DCEB9",
								"font-weight" : "bolder",
								"background-image" : "none"
							});
						}
					}]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [{
						"constraint": {"rowIndex": 0, "colIndex": 0},
						"configurator": function(cell){
							cell.columnName = "title";
							cell.bind("fieldLabel").toDataSet(app.lookup("selectedPlan"), "title", 0);
						}
					}]
				}
			});
			grid_2.style.css({
				"font-family" : "AppleSDGothicNeoB00"
			});
			if(typeof onGrd4Click == "function") {
				grid_2.addEventListener("click", onGrd4Click);
			}
			container.addChild(grid_2, {
				"top": "117px",
				"bottom": "10px",
				"left": "190px",
				"width": "204px"
			});
			
			var grid_3 = new cpr.controls.Grid("contentGrd");
			grid_3.init({
				"dataSet": app.lookup("jeju"),
				"columns": [
					{"width": "25px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
								cell.filterable = false;
								cell.sortable = false;
								cell.style.css({
									"background-color" : "#FFFFFF"
								});
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "title";
								cell.text = "관광지 목록";
								cell.style.css({
									"background-color" : "#FFFFFF",
									"color" : "#2DCEB9",
									"font-weight" : "bolder"
								});
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
								cell.style.css({
									"background-color" : "#FFFFFF"
								});
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "title";
								cell.style.css({
									"font-weight" : "normal"
								});
							}
						}
					]
				}
			});
			grid_3.style.css({
				"font-weight" : "bolder",
				"font-family" : "AppleSDGothicNeoB00"
			});
			if(typeof onGrd2Click == "function") {
				grid_3.addEventListener("click", onGrd2Click);
			}
			if(typeof onGrd2RowCheck == "function") {
				grid_3.addEventListener("row-check", onGrd2RowCheck);
			}
			if(typeof onGrd2RowUncheck == "function") {
				grid_3.addEventListener("row-uncheck", onGrd2RowUncheck);
			}
			container.addChild(grid_3, {
				"top": "155px",
				"bottom": "10px",
				"left": "404px",
				"width": "245px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("titleSearch");
			inputBox_1.placeholder = "지역 검색";
			inputBox_1.style.css({
				"border-right-style" : "solid",
				"border-bottom-color" : "#000000",
				"border-left-style" : "solid",
				"border-left-color" : "#000000",
				"border-top-color" : "#000000",
				"border-bottom-style" : "solid",
				"border-right-color" : "#000000",
				"font-family" : "AppleSDGothicNeoB00",
				"border-top-style" : "solid",
				"text-align" : "center"
			});
			var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("areaSearch"));
			inputBox_1.setBindContext(dataMapContext_1);
			inputBox_1.bind("value").toDataMap(app.lookup("areaSearch"), "title");
			container.addChild(inputBox_1, {
				"top": "77px",
				"left": "190px",
				"width": "355px",
				"height": "30px"
			});
			
			var button_1 = new cpr.controls.Button("searchbtn");
			button_1.value = "검색";
			button_1.style.css({
				"background-color" : "#98dde3",
				"background-repeat" : "no-repeat",
				"text-shadow" : "none",
				"color" : "#FFFFFF",
				"font-size" : "15px",
				"font-family" : "AppleSDGothicNeoB00",
				"background-image" : "none"
			});
			if(typeof onSearchbtnClick == "function") {
				button_1.addEventListener("click", onSearchbtnClick);
			}
			container.addChild(button_1, {
				"top": "77px",
				"left": "549px",
				"width": "100px",
				"height": "30px"
			});
			
			var button_2 = new cpr.controls.Button("cancelBtn");
			button_2.value = "";
			button_2.style.css({
				"border-right-style" : "solid",
				"background-size" : "cover",
				"border-bottom-color" : "#000000",
				"border-left-style" : "solid",
				"border-left-color" : "#000000",
				"border-top-color" : "#000000",
				"border-bottom-style" : "solid",
				"border-right-color" : "#000000",
				"background-image" : "url('images/cancelbutton.png')",
				"background-position" : "center",
				"border-top-style" : "solid"
			});
			if(typeof onButtonClick2 == "function") {
				button_2.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_2, {
				"top": "8px",
				"right": "27px",
				"width": "100px",
				"height": "70px"
			});
			
			var button_3 = new cpr.controls.Button("updateBtn");
			button_3.style.css({
				"border-right-style" : "solid",
				"background-size" : "cover",
				"border-bottom-color" : "#000000",
				"border-left-style" : "solid",
				"border-left-color" : "#000000",
				"border-top-color" : "#000000",
				"border-bottom-style" : "solid",
				"border-right-color" : "#000000",
				"background-image" : "url('images/modifyButton.png')",
				"background-position" : "center",
				"border-top-style" : "solid"
			});
			if(typeof onButtonClick == "function") {
				button_3.addEventListener("click", onButtonClick);
			}
			container.addChild(button_3, {
				"top": "8px",
				"right": "137px",
				"width": "100px",
				"height": "70px"
			});
			
			var comboBox_1 = new cpr.controls.ComboBox("categoryCmb");
			comboBox_1.style.css({
				"font-family" : "AppleSDGothicNeoB00"
			});
			comboBox_1.bind("value").toDataMap(app.lookup("areaSearch"), "cat1");
			(function(comboBox_1){
				comboBox_1.addItem(new cpr.controls.Item("", ""));
				comboBox_1.addItem(new cpr.controls.Item("자연", "A01"));
				comboBox_1.addItem(new cpr.controls.Item("인문", "A02"));
				comboBox_1.addItem(new cpr.controls.Item("레포츠", "A03"));
				comboBox_1.addItem(new cpr.controls.Item("쇼핑", "A04"));
				comboBox_1.addItem(new cpr.controls.Item("음식점", "A05"));
				comboBox_1.addItem(new cpr.controls.Item("숙박", "B02"));
				comboBox_1.addItem(new cpr.controls.Item("추천코스", "C01"));
			})(comboBox_1);
			if(typeof onCategoryCmbSelectionChange == "function") {
				comboBox_1.addEventListener("selection-change", onCategoryCmbSelectionChange);
			}
			container.addChild(comboBox_1, {
				"top": "117px",
				"left": "404px",
				"width": "245px",
				"height": "28px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "myPlanDetail";
	cpr.core.Platform.INSTANCE.register(app);
})();
